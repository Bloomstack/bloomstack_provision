---
# tasks file for create_bench
- name: creating bench
  command: 'bench init {{ bench_name }} --frappe-path {{ frappe_path }} --frappe-branch {{ frappe_branch }} --skip-redis-config-generation --python /usr/bin/python3.6'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/'
  when: docker_setup == '1'

- name: creating bench
  command: 'bench init {{ bench_name }} --frappe-path {{ frappe_path }} --frappe-branch {{ frappe_branch }} --python /usr/bin/python3.6'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/'
  when: docker_setup == '0'

- name: dns_multitenant on
  command: 'bench config dns_multitenant on'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/{{ bench_name }}'

- name: setup sudoers
  command: '{{ item }}'
  with_items:
    - 'sudo bench setup sudoers {{ user_name }}'
    # - 'sudo bench setup nginx'
  become: yes
  args:
    chdir: '/home/{{ user_name }}/{{ bench_name }}'

- name: setting mariadb and redis in commonsite_config
  command: '{{ item }}'
  with_items:
    - 'bench set-mariadb-host 0.0.0.0'
    - 'bench set-redis-cache-host 0.0.0.0:6379/1'
    - 'bench set-redis-queue-host 0.0.0.0:6379/2'
    - 'bench set-redis-socketio-host 0.0.0.0:6379/3'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/{{ bench_name }}'
  when: docker_setup == '1'

- name: get erpnext
  command: '{{ item }}'
  with_items:
    - 'bench get-app  {{ erpnext_path }} --branch {{ erpnext_branch }}'
    - 'bench get-app  {{ bloomstack_core_path }} --branch {{ bloomstack_core_branch }}'
    - 'bench setup requirements'
    - 'bench build'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/{{ bench_name }}'

- name: setup nginx
  command: '{{ item }}'
  with_items:
    - 'bench setup nginx'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/{{ bench_name }}'

- name: setup developer_mode
  command: '{{ item }}'
  with_items:
    - 'bench set-config -g developer_mode 1'
  become_user: '{{ user_name }}'
  args:
    chdir: '/home/{{ user_name }}/{{ bench_name }}'
  when: production_mode == '0'

- name: Create a symbolic link
  file:
    src: /home/{{ user_name }}/{{ bench_name }}/config/nginx.conf
    dest: /etc/nginx/conf.d/{{ bench_name }}.conf
    state: link
  become: yes

- name: mute_emails
  import_tasks: email.yml

#write sql password in password.txt
- name: wrote sql password
  ansible.builtin.lineinfile:
    path: '/home/{{ user_name }}/{{ bench_name }}/password.txt'
    state: present
    line: "sql_root_pass: {{ mysql_root_pass }}"
  become_user: '{{ user_name }}'
  when: production_mode == '0'